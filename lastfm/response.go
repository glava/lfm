package lastfm

import "encoding/json"
import "encoding/xml"
import "fmt"

type Response interface {
	ToString() string
}

type PlaylistSaveResponse struct {
	Playlists struct {
		PlaylistValue Playlist `xml:"playlist"`
	} `xml:"playlists"`
}

func (t PlaylistSaveResponse) ToString() string {
	return "Playlist " + t.Playlists.PlaylistValue.Title
}

//generated by http://mholt.github.io/json-to-go/
type TracksResponse struct {
	Toptracks struct {
		Tracks []Track `json:"track"`
		Attr   struct {
			Artist     string `json:"artist"`
			Page       string `json:"page"`
			Perpage    string `json:"perPage"`
			Totalpages string `json:"totalPages"`
			Total      string `json:"total"`
		} `json:"@attr"`
	} `json:"toptracks"`
}

func (t TracksResponse) ToString() string {
	s := ""
	for _, v := range t.Toptracks.Tracks {
		s = s + v.Artist.Name + " - " + v.Name + "\n"
	}
	return s
}

type TokenResponse struct {
	Token string `json:"token"`
}

func (t TokenResponse) ToString() string {
	return t.Token
}

type ArtistResponse struct {
	Topartists struct {
		Artists []Artist `json:"artist"`
		Attr    struct {
			Tag string `json:"tag"`
		} `json:"@attr"`
	} `json:"topartists"`
}

func (t ArtistResponse) ToString() string {
	s := ""
	for _, v := range t.Topartists.Artists {
		s = s + v.Name + "\n"
	}
	return s
}

type SessionResponse struct {
	Session struct {
		Name       string `json:"name"`
		Key        string `json:"key"`
		Subscriber string `json:"subscriber"`
	} `json:"session"`
}

func (t SessionResponse) ToString() string {
	return t.Session.Name + " with session key " + t.Session.Key
}

func ToTracks(httpBody []byte) TracksResponse {
	var response TracksResponse
	json.Unmarshal(httpBody, &response)
	fmt.Println(response)
	return response
}

func ToArtists(httpBody []byte) ArtistResponse {
	var response ArtistResponse
	json.Unmarshal(httpBody, &response)

	return response
}

func ToToken(httpBody []byte) TokenResponse {
	var response TokenResponse
	json.Unmarshal(httpBody, &response)
	return response
}

func ToSession(httpBody []byte) SessionResponse {
	var response SessionResponse
	json.Unmarshal(httpBody, &response)
	return response
}

func ToPlaylist(httpBody []byte) PlaylistSaveResponse {
	var response PlaylistSaveResponse
	xml.Unmarshal(httpBody, &response)
	return response
}
